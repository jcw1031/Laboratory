<p data-ke-size="size16">택시비 절약을 위해 함께 택시를 탑승할 학생들을 모집하는 '택시팟' 서비스를 개발하면서 <b>Spring Events를 사용했던 경험</b>에 대해 정리해보려고 합니다. 해당 프로젝트 코드는 GitHub에서 확인할 수 있습니다.</p>
<h2 data-ke-size="size26">Spring Events</h2>
<p data-ke-size="size16">스프링 이벤트는 <u><b>애플리케이션 내부에서 이벤트를 발행해 데이터를 전달할 수 있는 기능</b></u>입니다.&nbsp;<code>ApplicationContext</code>에서 제공하는 기능으로 <code>ApplicationEventPublisher</code>를 주입받아 간단히 사용할 수 있습니다. 왠지 모르겠지만, 공식문서에서 스프링 이벤트와 관련해 자세히 설명된 부분을 찾지는 못 하겠더라구요. 하지만 <b>사용법은 간단하기 때문에 몇 가지 주의사항을 제외하면 유용하게 활용</b>할 수 있었습니다.</p>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16"><code>ApplicationEventPublisher</code> 인터페이스를 살펴보면&nbsp;매개변수 타입이 다른 두 개의 <code>publishEvent()</code> 메서드가 있습니다.</p>
<pre id="code_1728468874524" class="java" data-ke-language="java" data-ke-type="codeblock"><code>@FunctionalInterface
public interface ApplicationEventPublisher {
	
    default void publishEvent(ApplicationEvent event) {
		publishEvent((Object) event);
	}
    
    void publishEvent(Object event);
}</code></pre>
<p data-ke-size="size16"><code>Object</code> 타입 매개변수를 가진 메서드는 Spring Framework 4.2 버전부터 지원되기 때문에 4.2 이전 버전(4.1 &ge;)에서는 이벤트 객체가 반드시 <code>ApplicationEvent</code> 추상 클래스를 상속하도록 구현해야 합니다.</p>
<p>[##_Image|kage@yCYBR/btsJ0zQDXpJ/udiTkgieKG3BG6xB2A9fTk/img.png|CDM|1.3|{"originWidth":1180,"originHeight":562,"style":"alignCenter","width":560,"height":267,"caption":"publishEvent(Object event)","filename":"Screenshot 2024-10-09 at 19.15.34.png"}_##]</p>
<p data-ke-size="size16">간단히 아래와 같이 이벤트를 발행할 수 있습니다.</p>
<pre id="code_1728473495531" class="java" data-ke-language="java" data-ke-type="codeblock"><code>@Component
public class ExampleEventPublisher {

    private final ApplicationEventPublisher eventPublisher;

    public ExampleEventPublisher(ApplicationEventPublisher eventPublisher) {
        this.eventPublisher = eventPublisher;
    }

    public void publishExampleEvent() {
        ExampleEvent event = new ExampleEvent();
        eventPublisher.publishEvent(event); // 이벤트 발행
    }
}</code></pre>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16">또한, 4.2 이전 버전에서는 이벤트 리스너를 <code>ApplicationListener</code> 인터페이스를 구현하도록 작성해야 했지만 4.2 버전부터는 <code>@EventListener</code> 어노테이션을 사용해 이벤트 핸들링을 할 수 있습니다. 처리할 이벤트의 타입은 매개변수를 통해 자동으로 감지합니다!</p>
<pre id="code_1728474172233" class="java" data-ke-language="java" data-ke-type="codeblock"><code>@Component
public class ExampleEventSubscriber {

    @EventListener
    public void handleExampleEvent(ExampleEvent event) {
        // 이벤트 처리
    }
}</code></pre>
<h2 data-ke-size="size26">사용 배경</h2>
<p data-ke-size="size16">택시팟 서비스에서 사용자가 팟에 참여하는 경우, 채팅방에 "~~님이 팟에 참여했습니다"라는 시스템 메시지를 전송해야 했습니다. 저는 <u><b>참여 로직은 시스템 메시지 전송에는 크게 관심이 없다고 생각했고 비동기로 수행되도록 구현</b></u>하고 싶었습니다.</p>
<pre id="code_1728475253315" class="java" data-ke-language="java" data-ke-type="codeblock"><code>public Long participateParty(Long partyId) {
    팟 참여 비즈니스 로직 수행
    ...
	시스템 메시지 전송
}</code></pre>
<p data-ke-size="size16">제가 고민한 방법은 <u><code>@Async</code>를사용</u>하는 것과 <u>스프링 이벤트를 사용하</u>는 것이었습니다.</p>
<h4 data-ke-size="size20"><code>@Async</code>를 사용해 비동기로 실행하기</h4>
<p data-ke-size="size16">Spring에서는 어노테이션만을 사용해 <u><a href="https://spring.io/guides/gs/async-method" target="_blank" rel="noopener">메서드를 비동기로 실행</a></u>할 수 있도록 지원합니다.</p>
<blockquote data-ke-style="style2"><span style="font-family: 'Noto Serif KR';">참고로 <code>@Async</code> 어노테이션은 <code>public</code> 메서드에 적용해야 하고 같은 클래스에서 비동기 메서드를 호출하는 것은 비동기로 동작하지 않습니다.</span></blockquote>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16">우선 <code>@Configuration</code>이 있는 클래스에 <code>@EnableAsync</code>를 추가해 비동기 처리를 활성화 합니다.</p>
<pre id="code_1728475822375" class="java" data-ke-language="java" data-ke-type="codeblock"><code>@EnableAsync
@Configuration
public class AsyncConfiguration {
}</code></pre>
<p data-ke-size="size16">메시지를 전송하는 메서드에 <code>@Async</code>를 추가해 호출한 스레드 이외의 다른 스레드에서 비동기로 실행되도록 했습니다.</p>
<pre id="code_1728476292123" class="java" data-ke-language="java" data-ke-type="codeblock"><code>@Component
public class SystemMessageSender {

	@Async
    public void sendParticipateMessage(Party party, User participant) {
    	팟 참여 메시지 전송
    }
}</code></pre>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16">이제 팟 참여 로직에서 아래와 같이 비즈니스 로직이 모두 실행되고 참여 메시지를 전송하는 메서드를 호출하는 방식으로 작성할 수 있습니다. 비동기로 실행한 덕분에 메시지 전송이 완료되기 전에 <code>participateParty()</code> 메서드는 종료되고 응답을 보낼 수 있습니다. 아무리 메시지 전송 로직이 느려져도 팟 참여 요청은 잘 수행하고 빠르게 응답할 수 있습니다.</p>
<pre id="code_1728476788661" class="java" data-ke-language="java" data-ke-type="codeblock"><code>public Long participateParty(Long partyId) {
    팟 참여 비즈니스 로직 수행
    ...
	systemMessageSender.sendParticipateMessage(party, authenticatedUser);
}</code></pre>
<h4 data-ke-size="size20">스프링 이벤트를 사용해 비동기로 실행하기</h4>
<hr contenteditable="false" data-ke-type="horizontalRule" data-ke-style="style5" />
<h4 data-ke-size="size20"><b>References</b></h4>
<p data-ke-size="size16"><a href="https://www.baeldung.com/spring-events" target="_blank" rel="noopener&nbsp;noreferrer">https://www.baeldung.com/spring-events</a></p>